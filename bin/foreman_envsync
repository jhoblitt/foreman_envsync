#!/usr/bin/env ruby
# frozen_string_literal: true

require "json"
require "open3"
require "optparse"
require "rest-client"
require "socket"
require "yaml"

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: foreman_envsync [options]"
  opts.separator ""
  opts.separator "Specifc options:"

  opts.on("-v", "--verbose", "Enable verbose output") do |o|
    options[:verbose] = [o]
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
option_parser.parse!

def cert_file(file)
  OpenSSL::X509::Certificate.new(File.read(file))
end

def key_file(file)
  OpenSSL::PKey::RSA.new(File.read(file))
end

def hammer_cmd(cmd)
  stdout, stderr, s = Open3.capture3(cmd)
  unless s.success?
    puts "command #{cmd} failed"
    puts stderr
    exit s.exitstatus
  end

  stdout
end

def hammer_cmd_parse(cmd)
  stdout = hammer_cmd(cmd)

  JSON.parse(stdout)
end

def collect_one_field(data, field)
  # hammer output format is an array of hashes -- one hash per item
  # convert it to a flat array
  data.collect { |x| x[field] }
end

def hammer_cmd_parse_one(cmd, field)
  collect_one_field(hammer_cmd_parse(cmd), field)
end

def foreman_env_list
  field = "Name"
  cmd = "hammer --output=json puppet-environment list --fields #{field}"

  hammer_cmd_parse_one(cmd, field)
end

def foreman_env_delete(name)
  cmd = "hammer --output=json puppet-environment delete --name #{name}"

  hammer_cmd_parse(cmd)
end

def foreman_location_ids
  field = "Id"
  cmd = "hammer --output=json location list --fields #{field}"

  hammer_cmd_parse_one(cmd, field)
end

def puppetserver_env_list
  hostname = Socket.gethostname

  res = RestClient::Request.execute(
    method: :get,
    url: "https://#{hostname}:8140/puppet/v3/environments",
    ssl_client_cert: cert_file("/etc/puppetlabs/puppet/ssl/certs/#{hostname}.pem"),
    ssl_client_key: key_file("/etc/puppetlabs/puppet/ssl/private_keys/#{hostname}.pem"),
    verify_ssl: true,
    ssl_ca_file: "/etc/puppetlabs/puppet/ssl/ca/ca_crt.pem"
  )

  JSON.parse(res)["environments"].keys
end

#
# Fetch list of puppet environments from puppetserver API.
#
ps_envs = puppetserver_env_list

if options[:verbose] && !ps_envs.nil?
  puts "found #{ps_envs.count} puppetserver environment(s)."
  puts YAML.dump(ps_envs) unless ps_envs.empty?
  puts
end

#
# Fetch list of puppet environments from foreman. The hammer cli is used to
# avoid having to manage credentials.  In theory, foreman supports auth using
# x509 similar to puppetserver but this failed when tested using both `curl` and
# configuring hammer to use x509.
#
f_envs = foreman_env_list

if options[:verbose] && !f_envs.nil?
  puts "found #{f_envs.count} foreman environment(s)."
  puts YAML.dump(f_envs) unless report.empty?
  puts
end

#
# Does foreman have any puppet envs puppetserver is unaware of?
#
extra_envs = f_envs - ps_envs

if options[:verbose] && !extra_envs.nil?
  puts "found #{extra_envs.count} foreman environment(s) unknown to puppetserver."
  puts YAML.dump(extra_envs) unless report.empty?
  puts
end

#
# Remove any foreman envs unknown to puppetserver
#
report = extra_envs.collect { |x| foreman_env_delete(x) } unless extra_envs.empty?

if options[:verbose] && !report.nil?
  puts "deleted #{report.count} foreman environment(s)."
  puts YAML.dump(report) unless report.empty?
  puts
end

# update foreman envs if anything was deleted
f_envs = foreman_env_list unless report.nil?

#
# Does puppetserver have any envs foreman is unaware of?
#
new_envs = ps_envs - f_envs
if options[:verbose] && !new_envs.nil?
  puts "found #{new_envs.count} puppetserver environment(s) unknown to foreman."
  puts YAML.dump(new_envs) unless new_envs.empty?
  puts
end
